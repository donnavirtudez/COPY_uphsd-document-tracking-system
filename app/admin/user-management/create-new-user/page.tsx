"use client";
import React, { useState, useEffect } from "react";
import styles from "./createNewUser.module.css";
import AdminHeader from "@/components/shared/adminHeader";
import Link from "next/link";
import toast from "react-hot-toast";
import { useRouter } from "next/navigation";

type Role = {
  RoleID: number;
  RoleName: string;
};

type Department = {
  DepartmentID: number;
  Name: string;
};

export default function CreateNewUser() {
  const router = useRouter();

  const [departmentOptions, setDepartmentOptions] = useState<Department[]>([]);
  const [roleOptions, setRoleOptions] = useState<Role[]>([]);

  const [selectedDepartment, setSelectedDepartment] = useState<number | null>(
    null
  );
  const [selectedRole, setSelectedRole] = useState<number | null>(null);
  const [email, setEmail] = useState("");
  const [emailValid, setEmailValid] = useState<boolean>(true);

  const [isDeptOpen, setIsDeptOpen] = useState(false);
  const [isRoleOpen, setIsRoleOpen] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);

  const [errorRoles, setErrorRoles] = useState<string | null>(null);
  const [errorDepartments, setErrorDepartments] = useState<string | null>(null);

  const [autoGeneratedPassword, setAutoGeneratedPassword] =
    useState<string>("");

  function generatePassword() {
    const upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    const lower = "abcdefghijklmnopqrstuvwxyz";
    const numbers = "0123456789";
    const specials = "!@#$%^&*";
    const allChars = upper + lower + numbers + specials;

    let password = "";
    password += upper[Math.floor(Math.random() * upper.length)];
    password += lower[Math.floor(Math.random() * lower.length)];
    password += numbers[Math.floor(Math.random() * numbers.length)];
    password += specials[Math.floor(Math.random() * specials.length)];

    for (let i = 0; i < 6; i++) {
      password += allChars.charAt(Math.floor(Math.random() * allChars.length));
    }

    return password
      .split("")
      .sort(() => Math.random() - 0.5)
      .join("");
  }

  useEffect(() => {
    setAutoGeneratedPassword(generatePassword());
  }, []);

  useEffect(() => {
    async function fetchRoles() {
      try {
        const res = await fetch("/api/user/role");
        if (!res.ok) throw new Error("Failed to fetch roles");
        const data: Role[] = await res.json();
        setRoleOptions(
          data.filter((role) => !role.RoleName.toLowerCase().includes("select"))
        );
        setErrorRoles(null);
      } catch (error: any) {
        setErrorRoles(error.message || "Unknown error fetching roles");
      }
    }
    fetchRoles();
  }, []);

  useEffect(() => {
    async function fetchDepartments() {
      try {
        const res = await fetch("/api/user/department");
        if (!res.ok) throw new Error("Failed to fetch departments");
        const data: Department[] = await res.json();
        setDepartmentOptions(
          data.filter((dept) => !dept.Name.toLowerCase().includes("select"))
        );
        setErrorDepartments(null);
      } catch (error: any) {
        setErrorDepartments(
          error.message || "Unknown error fetching departments"
        );
      }
    }
    fetchDepartments();
  }, []);

  useEffect(() => {
    const domain = "@cvsu.edu.ph";
    setEmailValid(email === "" || email.toLowerCase().endsWith(domain));
  }, [email]);

  const isAdminSelected = selectedRole
    ? roleOptions
        .find((r) => r.RoleID === selectedRole)
        ?.RoleName.toLowerCase() === "admin"
    : false;

  useEffect(() => {
    if (isAdminSelected) {
      setSelectedDepartment(null);
    }
  }, [isAdminSelected]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!email) return toast.error("Please enter an email.");
    if (!emailValid) return toast.error("Email must end with @cvsu.edu.ph");
    if (!selectedRole) return toast.error("Please select a role.");
    if (!isAdminSelected && !selectedDepartment)
      return toast.error("Please select a department.");

    const confirm = window.confirm(
      "Are you sure you want to create this user? An email will be sent to the user with their credentials."
    );
    if (!confirm) return;

    const payload = {
      email,
      departmentID: selectedDepartment,
      roleID: selectedRole,
      password: autoGeneratedPassword,
    };

    setIsSubmitting(true);

    try {
      const res = await fetch("/api/admin/user-management/create-user", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(payload),
      });

      const result = await res.json();

      if (!res.ok) {
        if (res.status === 409) {
          return toast.error(result.message || "Email already exists.");
        }
        throw new Error(result.message || "Unknown error creating user");
      }

      toast.success("User created successfully!");
      handleClear();
      setAutoGeneratedPassword(generatePassword());

      router.push("/admin/user-management");
    } catch (err: any) {
      toast.error("Error: " + err.message);
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleClear = () => {
    setEmail("");
    setSelectedDepartment(null);
    setSelectedRole(null);
  };

  return (
    <div className={styles.container}>
      <AdminHeader />
      <div className={styles.contentContainer}>
        <div className={styles.formWrapper}>
          <h2 className={styles.title}>Create New User</h2>
          <hr className={styles.separator} />
          <div className={styles.sectionTitle}>Information</div>

          <form onSubmit={handleSubmit}>
            {/* Email */}
            <div className={styles.inputGroup}>
              <label>Email</label>
              <input
                type="email"
                className={styles.inputField}
                placeholder="Enter email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                style={{ borderColor: emailValid ? undefined : "red" }}
              />
              {!emailValid && (
                <small style={{ color: "red" }}>
                  Email must end with @cvsu.edu.ph
                </small>
              )}
            </div>

            {/* Role */}
            <div className={styles.inputGroup}>
              <label>Role</label>
              {errorRoles ? (
                <div className={styles.errorMessage}>{errorRoles}</div>
              ) : (
                <div className={styles.dropdown}>
                  <button
                    type="button"
                    className={styles.dropdownButton}
                    onClick={() => setIsRoleOpen(!isRoleOpen)}
                  >
                    {selectedRole
                      ? roleOptions.find((r) => r.RoleID === selectedRole)
                          ?.RoleName
                      : "Select"}
                  </button>
                  {isRoleOpen && (
                    <div className={styles.dropdownList}>
                      {roleOptions.map((role) => (
                        <div
                          key={role.RoleID}
                          onClick={() => {
                            setSelectedRole(role.RoleID);
                            setIsRoleOpen(false);
                          }}
                          className={styles.dropdownItem}
                        >
                          {role.RoleName}
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              )}
            </div>

            {/* Department */}
            {!isAdminSelected && (
              <div className={styles.inputGroup}>
                <label>Department</label>
                {errorDepartments ? (
                  <div className={styles.errorMessage}>{errorDepartments}</div>
                ) : (
                  <div className={styles.dropdown}>
                    <button
                      type="button"
                      className={styles.dropdownButton}
                      onClick={() => setIsDeptOpen(!isDeptOpen)}
                    >
                      {selectedDepartment
                        ? departmentOptions.find(
                            (d) => d.DepartmentID === selectedDepartment
                          )?.Name
                        : "Select"}
                    </button>
                    {isDeptOpen && (
                      <div className={styles.dropdownList}>
                        {departmentOptions.map((dept) => (
                          <div
                            key={dept.DepartmentID}
                            onClick={() => {
                              setSelectedDepartment(dept.DepartmentID);
                              setIsDeptOpen(false);
                            }}
                            className={styles.dropdownItem}
                          >
                            {dept.Name}
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                )}
              </div>
            )}

            <hr className={styles.separator} />

            {/* Auto Password */}
            <div className={styles.temporaryPasswordContainer}>
              <h1 className={styles.sectionTitle}>Auto-Generated Password</h1>
              <div className={styles.temporaryPasswordSection}>
                <p>Temporary Password</p>
                <div className={styles.temporaryPasswordHolder}>
                  {autoGeneratedPassword || "Generating password..."}
                </div>
                <p>User must change password on first login</p>
              </div>
            </div>

            {/* Buttons */}
            <div className={styles.buttonGroup}>
              <div className={styles.leftButtons}>
                <Link href="/admin/user-management">
                  <button className={styles.backBtn} type="button">
                    Back
                  </button>
                </Link>
              </div>
              <div className={styles.rightButtons}>
                <button
                  className={styles.clearBtn}
                  type="button"
                  onClick={handleClear}
                >
                  Clear
                </button>
                <button
                  className={styles.submitBtn}
                  type="submit"
                  disabled={!emailValid || isSubmitting}
                  title={!emailValid ? "Invalid email" : undefined}
                >
                  {isSubmitting ? "Submitting..." : "Submit"}
                </button>
              </div>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}
