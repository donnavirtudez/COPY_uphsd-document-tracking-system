// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") 
}

// ROLE TABLE
model Role {
  RoleID   Int     @id @default(autoincrement())
  RoleName String

  Users User[]
}

// DEPARTMENT TABLE
model Department {
  DepartmentID Int     @id @default(autoincrement())
  Name         String
  Description  String?

  Users     User[]
  Documents Document[]
}

// USER TABLE
model User {
  UserID        Int       @id @default(autoincrement())
  FullName      String
  Email         String    @unique 
  Password      String
  MobileNumber  String?
  Gender        String?
  RoleID        Int
  DepartmentID  Int?
  Position      String
  EmployeeID    String?   @unique
  ProfilePicture String?
  IsActive      Boolean   @default(true)
  CreatedAt     DateTime  @default(now())
  UpdatedAt     DateTime?  @updatedAt

  Role       Role         @relation(fields: [RoleID], references: [RoleID])
  Department Department?  @relation(fields: [DepartmentID], references: [DepartmentID])

  Documents       Document[]
  DocumentRequests DocumentRequest[]
  ActivityLogs     ActivityLog[]
  AdminActionsPerformed AdminAction[] @relation("AdminPerformed")
  AdminActionsTargeted  AdminAction[] @relation("AdminTargeted")
  ESignatures      ESignature[]
  DocumentVersions DocumentVersion[]
  Notifications    Notification[]
}

// DOCUMENT TABLE
model Document {
  DocumentID   Int      @id @default(autoincrement())
  Title        String
  Type         String
  Description  String
  CreatedBy    Int
  DepartmentID Int?
  CreatedAt    DateTime @default(now())
  UpdatedAt    DateTime @updatedAt
  Status       String   @default("Active")

  Creator    User       @relation(fields: [CreatedBy], references: [UserID])
  Department Department? @relation(fields: [DepartmentID], references: [DepartmentID])
  Requests   DocumentRequest[]
  Versions   DocumentVersion[]
}

// DOCUMENT REQUEST TABLE
model DocumentRequest {
  RequestID   Int      @id @default(autoincrement())
  UserID      Int
  DocumentID  Int
  StatusID    Int
  RequestedAt DateTime @default(now())
  CompletedAt DateTime?
  Priority    String   @default("Normal")
  Remarks     String?

  User     User     @relation(fields: [UserID], references: [UserID])
  Document Document @relation(fields: [DocumentID], references: [DocumentID])
  Status   Status   @relation(fields: [StatusID], references: [StatusID])
  ESignature ESignature?
}

// STATUS TABLE
model Status {
  StatusID   Int               @id @default(autoincrement())
  StatusName String

  DocumentRequests DocumentRequest[]
}

// ACTIVITY LOG TABLE
model ActivityLog {
  LogID      Int      @id @default(autoincrement())
  PerformedBy Int
  Action     String
  TargetType String
  TargetID   Int
  Remarks    String?
  Timestamp  DateTime @default(now())

  User User @relation(fields: [PerformedBy], references: [UserID])
}

// E-SIGNATURE TABLE
model ESignature {
  ESignatureID Int      @id @default(autoincrement())
  RequestID    Int      @unique
  SignedBy     Int
  SignatureData String
  SignedAt     DateTime @default(now())

  Request DocumentRequest @relation(fields: [RequestID], references: [RequestID])
  User    User            @relation(fields: [SignedBy], references: [UserID])
}

// ADMIN ACTION LOG TABLE
model AdminAction {
  AdminActionID Int      @id @default(autoincrement())
  PerformedBy   Int
  TargetID      Int
  Action        String
  Remarks       String?
  Timestamp     DateTime @default(now())

  Admin  User @relation("AdminPerformed", fields: [PerformedBy], references: [UserID])
  Target User @relation("AdminTargeted", fields: [TargetID], references: [UserID])
}

// DOCUMENT VERSION TABLE
model DocumentVersion {
  VersionID        Int      @id @default(autoincrement())
  DocumentID       Int
  VersionNumber    Int
  ChangedBy        Int
  ChangeDescription String
  FilePath         String?
  CreatedAt        DateTime @default(now())

  Document Document @relation(fields: [DocumentID], references: [DocumentID])
  User     User     @relation(fields: [ChangedBy], references: [UserID])
}

// NOTIFICATION TABLE
model Notification {
  NotificationID Int      @id @default(autoincrement())
  UserID         Int
  Title          String
  Message        String
  IsRead         Boolean  @default(false)
  CreatedAt      DateTime @default(now())
  ReadAt         DateTime?

  User User @relation(fields: [UserID], references: [UserID])
}